
read in 9 lines of 9 chars, numbers and dots 
allocate an array 9x9 of complex objects 
fill out the array with the starting data 
#in each cell, and object can be: 
#       a given number 
#       a calculated number 
#       a set of possibilities 
#       unknown (the starting point) 
displaytheboard 
# work out the widest field 
maxwidth = 2 
for row in 1..9 
        for col in 1..9 
                if cell has possiblities and length(possibilities) > maxwidth 
                        maxwidth = length(possibliities) 
                end 
        end 
end 
# now have longest cell 
for row in 1..9 
        print line of '-' length = 2 + 9 * (maxwidth + 2), with a newline 
        print '| ' 
        for col in 1..9 
                if cell is unknown 
                        display maxwidth blanks 
                else if cell is given 
                        display number and '*' padded to maxwidth 
                else if cell is calculated 
                        display number and '-' padded to maxwidth 
                else if cell is set 
                        display set padded to maxwidth 
                else 
                        screw up 
                end 
                print ' |' 
        end 
        print '\n' 
end 
print line of '-' length = 2 + 9 * (maxwidth + 2), with a newline 

# first time round, for each unknown cell calculate the set of possibilities for that cell 
loop over all unknown cells 
        calculate the possibilites 
end 
displaytheboard 
# find all (any?) cells with only one possibility, replace them with the calculated result 
loop 
        loop over all possibility cells 
                if there is only one possibility 
                        set that cell to the calculated number 
                        note we changed something 
                end 
        end 
        displaytheboard 
        if anything changed 
                calculate all the possiblilities again 
        otherwise 
                think again 
        end 
end 
calculate possibilities 
# rule1 - the number can't appear in other cells in this row 
# rule2 - the number can't appear in other cells in this column 
# rule3 - the number can't appear in other cells in this 3x3 block 
# rule1, given row & column 
base set is {1..9} 
for i in 1..9 
        if i = row, next iteration 
        if array(i, column) unknown, next iteration 
        if array(i, column) is possibilities, next iteration (for now) 
        delete array(i, column) value from base set 
end 
if the set is just one number then assign it to the cell and return 
# rule2, given row & column 
base set is what's left from rule1 
for i in 1..9 
        if i = column, next iteration 
        if array(row, i) unknown, next iteration 
        if array(row, i) is possibilities, next iteration (for now) 
        delete array(row, i) value from base set 
end 
if the set is just one number then assign it to the cell and return 
base set is what's left from rule2 
# rule3 
# which block are we in ? 
# get a 0,1,2 value, upper left is 0,0 
rowsegment = row integer/ 3 
colsegment = column integer/ 3 
rowoffset = rowsegment * 3 
coloffset = colsegment * 3 
# now have offsets of 0,3,6 
for i in 1..3 
        for j in 1..3 
                if rowoffset+i = row and coloffset+j = column then next iteration 
                if array(rowoffset+i, coloffset+j) unknown, next iteration 
                if array(rowoffset+i, coloffset+j) is possibilities, next iteration (for now) 
                delete array(rowoffset+i, coloffset+j) value from base set 
        end 
end 
assign base set to the cell 
